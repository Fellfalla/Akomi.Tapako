<Window x:Class="Tapako.Utilities.WiringTool.View.WiringToolView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:behaviors="clr-namespace:Tapako.Utilities.WiringTool.Behaviors"
        xmlns:viewModel="clr-namespace:Tapako.Utilities.WiringTool.ViewModel"
        xmlns:converter="clr-namespace:Tapako.Design.Converter;assembly=Tapako.Design"
        xmlns:connection="clr-namespace:Akomi.InformationModel.Component.Connection;assembly=Akomi.InformationModel"
        xmlns:view="clr-namespace:Tapako.Utilities.WiringTool.View"
        mc:Ignorable="d"
        SizeToContent="WidthAndHeight"
        WindowStartupLocation="CenterOwner"
        x:Name="WiringTool"
        FocusManager.FocusedElement="{Binding ElementName=ButtonOk}"
        d:DesignHeight="600"
        
        d:DataContext="{d:DesignInstance viewModel:WiringToolDesignViewModel, IsDesignTimeCreatable=True}">

    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/Tapako.Design;component/TapakoDesign.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <Style x:Key="Magnifier" TargetType="{x:Type Image}">
                <EventSetter Event="MouseDown" Handler="ActivateMagnifierOnClick" />
                <EventSetter Event="MouseWheel" Handler="ActivateMagnifierOnZoom" />
                <EventSetter Event="MouseLeave" Handler="DeactivateMagnifierOnMouseLeave" />
                <!--<Setter Property="Background" Value="LightGray"></Setter>-->
            </Style>

            <Style TargetType="{x:Type Button}">
                <Setter Property="Margin" Value="10,10,10,0" />
            </Style>

            <Storyboard x:Key="AkomiLogoAnimation">
                <DoubleAnimation
                    Storyboard.TargetProperty="(Image.RenderTransform).(RotateTransform.Angle)"
                    By="360"
                    SpeedRatio="0.5"
                    RepeatBehavior="Forever" />
            </Storyboard>
            <Style x:Key="RotatingImage" TargetType="{x:Type Image}">
                
            </Style>

            <Storyboard x:Key="AkomiLogoAnimationReverse">
                <DoubleAnimation
                    Storyboard.TargetProperty="(Image.RenderTransform).(RotateTransform.Angle)"
                    By="-360"
                    SpeedRatio="0.5"
                    RepeatBehavior="Forever" />
            </Storyboard>

            <converter:HmiImageConverter x:Key="HmiImageConverter" />


            <Style x:Key="HmiImage" TargetType="{x:Type Image}" BasedOn="{StaticResource Magnifier}">
                <Setter Property="Stretch" Value="Uniform" />
                <Setter Property="MaxHeight" Value="400" />
                <Setter Property="MaxWidth" Value="400" />
                <Setter Property="MinHeight" Value="200" />
                <Setter Property="IsEnabled" Value="True" />
            </Style>


        </ResourceDictionary>
    </Window.Resources>

    <Grid x:Name="Root" IsSharedSizeScope="False" Margin="10">
        <Grid.ColumnDefinitions>
            <!--<ColumnDefinition Width="Auto"></ColumnDefinition>-->
            <ColumnDefinition Width="Auto" SharedSizeGroup="ConnectionColumn" />
            <ColumnDefinition Width="Auto" MinWidth="75" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="ConnectionColumn" />
            <!--<ColumnDefinition Width="Auto"></ColumnDefinition>-->
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <xctk:MagnifierManager.Magnifier>
            <xctk:Magnifier Radius="150"
                            ZoomFactor=".8"
                            x:Name="MyMagnifier"
                            BorderThickness="5"
                            FrameType="Circle">
                <xctk:Magnifier.BorderBrush>
                    <RadialGradientBrush Center="0.5,0.5" RadiusX="0.5" RadiusY="0.5" GradientOrigin="0.5,0.5">
                        <GradientStop Color="Black" Offset="0.9" />
                        <GradientStop Color="White" Offset="1" />
                    </RadialGradientBrush>
                </xctk:Magnifier.BorderBrush>
            </xctk:Magnifier>
        </xctk:MagnifierManager.Magnifier>

        <!--Headline-->
        <Label Grid.Column="0" Grid.Row="0" HorizontalAlignment="Center" Style="{StaticResource BigHeading}"
               Content="{Binding ParentName}" />
        <Label Grid.Column="2" Grid.Row="0" HorizontalAlignment="Center" Style="{StaticResource BigHeading}"
               Content="{Binding ChildName}" />
        <Image IsEnabled="True" Grid.Column="1" 
               Grid.Row="0" 
               Source="../Assets/icon.ico" 
               Width="25"
               MouseDown="ToggleRotation"
               MouseEnter="ToggleRotation"
               Loaded="ToggleRotation"
               RenderTransformOrigin=".5,.5">
                <VisualStateManager.VisualStateGroups>
                <VisualStateGroup Name="ImageRotationGroup">
                    <VisualStateGroup.States>
                        <VisualState x:Name="RotateClockwise">
                            <Storyboard>
                                <DoubleAnimation
                                Storyboard.TargetProperty="(Image.RenderTransform).(RotateTransform.Angle)"
                                By="360"
                                SpeedRatio="0.5"
                                RepeatBehavior="Forever" />
                            </Storyboard>
                        </VisualState>
                        <VisualState x:Name="RotateCounterClockwise">
                            <Storyboard>
                                <DoubleAnimation
                                Storyboard.TargetProperty="(Image.RenderTransform).(RotateTransform.Angle)"
                                By="-360"
                                SpeedRatio="0.5"
                                RepeatBehavior="Forever" />
                            </Storyboard>
                        </VisualState>
                    </VisualStateGroup.States>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Image.RenderTransform>
                <RotateTransform Angle="0" />
            </Image.RenderTransform>
            <!--<Image.Triggers>
                <EventTrigger RoutedEvent="Image.Loaded">
                    <EventTrigger.Actions>
                        <BeginStoryboard Storyboard="{StaticResource AkomiLogoAnimation}" />
                    </EventTrigger.Actions>
                </EventTrigger>
            </Image.Triggers>-->
        </Image>

        <!--Main Content-->
        <Grid Grid.Column="0" 
              Grid.Row="1" Grid.ColumnSpan="3" 
              HorizontalAlignment="Center"
              VerticalAlignment="Stretch"
              >
            <Grid.RowDefinitions>
                <RowDefinition Height="*" SharedSizeGroup="DeviceAreaRow" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <Image Grid.Row="0" Grid.Column="0"
                   Source="{Binding ParentHmiImage , Converter={StaticResource HmiImageConverter}}"
                   Style="{StaticResource HmiImage}"
                   Height="{Binding ElementName=ParentConnectionList, Path=ActualHeight}"/>

            <view:ListConnectorView Grid.Column="1" 
                                    Grid.Row="0"
                                    Height="{Binding RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type FrameworkElement}}, Path=ActualHeight}"
                                    LeftList="{Binding ParentConnections}"
                                    RightList="{Binding ChildConnections}"
                                    WiringObjects="{Binding Wirings}"
                                    
                                    x:Name="ListConnector"
                                    >
                <!--WiringsChanged="ListConnector_OnWiringsChanged"-->
            </view:ListConnectorView>
            
            <Image Grid.Row="0" Grid.Column="2"
                   Source="{Binding ChildHmiImage , Converter={StaticResource HmiImageConverter}}"
                   Style="{StaticResource HmiImage}"
                   Height="{Binding ElementName=ChildConnectionList, Path=ActualHeight}" />
            
        </Grid>

        <StackPanel Grid.Column="0" Grid.Row="2" Grid.ColumnSpan="3" HorizontalAlignment="Right" VerticalAlignment="Bottom"
                    Orientation="Horizontal"
                    >
            <StackPanel.Resources>
                <ResourceDictionary>
                    <Style TargetType="Button">
                        <Setter Property="Margin" Value="10,10,0,10"></Setter>
                        <Setter Property="MinWidth" Value="70"></Setter>
                    </Style>
                </ResourceDictionary>
            </StackPanel.Resources>
            <Button Name="ButtonOk" Grid.Column="0" HorizontalAlignment="Stretch" Click="ClickOk">OK</Button>
            <Button Grid.Column="1" HorizontalAlignment="Stretch" Click="ClickReset" >Reset</Button>
            <Button Grid.Column="2" HorizontalAlignment="Stretch" Click="ClickCancel">Cancel</Button>
        </StackPanel>
        
        <!--<Grid Grid.Column="0" Grid.Row="2" Grid.ColumnSpan="3" HorizontalAlignment="Stretch" VerticalAlignment="Bottom">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <Button Name="ButtonOk" Grid.Column="0" HorizontalAlignment="Stretch" Click="ClickOk" Margin="0,10,10,0">OK</Button>
            <Button Grid.Column="1" HorizontalAlignment="Stretch" Click="ClickReset" Margin="10,10,10,0">Reset</Button>
            <Button Grid.Column="2" HorizontalAlignment="Stretch" Click="ClickCancel" Margin="10,10,0,0">Cancel</Button>
            
            <Button Grid.Column="2" HorizontalAlignment="Stretch" Click="ClickCancel" Margin="10,10,0,0">Refresh</Button>
        </Grid>-->
    </Grid>

</Window>