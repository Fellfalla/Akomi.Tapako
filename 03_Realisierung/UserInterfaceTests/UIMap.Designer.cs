// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace UserInterfaceTests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Analysiert die Periphery in der vorgegebenen Subnet Maske
        /// </summary>
        public void AnalyseDefaultPeriphery()
        {
            #region Variable Declarations
            WpfTabPage uIPeripherieanalyseTabPage = this.UITapakoWindow.UIItemTabList.UIPeripherieanalyseTabPage;
            WpfButton uIAnalysePeripheryButton = this.UITapakoWindow.UIItemTabList.UIPeripherieanalyseTabPage.UIAnalysePeripheryButton;
            #endregion

            // Die Aufzeichnung für die momentan getestete Anwendung "\\VBOXSVR\akomi\Arbeitspakete\TP4 - Umsetzung\Javelin\03_Realisierung\Tapako\Tapako\bin\Debug\Tapako.exe" ist möglicherweise nicht korrekt, da diese sich auf einer Netzwerkfreigabe befindet. Installieren Sie die Anwendung unter einem lokalen Pfad.

            // Click 'Peripherieanalyse' tab
            Mouse.Click(uIPeripherieanalyseTabPage, new Point(52, 9));

            // Die Aufzeichnung für die momentan getestete Anwendung "\\VBOXSVR\akomi\Arbeitspakete\TP4 - Umsetzung\Javelin\03_Realisierung\Tapako\Tapako\bin\Debug\Tapako.exe" ist möglicherweise nicht korrekt, da diese sich auf einer Netzwerkfreigabe befindet. Installieren Sie die Anwendung unter einem lokalen Pfad.

            // Click 'Analyse Periphery' button
            Mouse.Click(uIAnalysePeripheryButton, new Point(305, 14));
        }
        
        /// <summary>
        /// Startet die Tapako.exe Datei
        /// </summary>
        public void StartApplication()
        {

            // Launch 'Tapako'
            ApplicationUnderTest tapakoApplication = ApplicationUnderTest.Launch(this.StartApplicationParams.ExePath, this.StartApplicationParams.AlternateExePath);

            // Die Aufzeichnung für die momentan getestete Anwendung "\\VBOXSVR\akomi\Arbeitspakete\TP4 - Umsetzung\Javelin\03_Realisierung\Tapako\Tapako\bin\Debug\Tapako.exe" ist möglicherweise nicht korrekt, da diese sich auf einer Netzwerkfreigabe befindet. Installieren Sie die Anwendung unter einem lokalen Pfad.
        }
        
        /// <summary>
        /// StartupDesktopLink - Use 'StartupDesktopLinkParams' to pass parameters into this method.
        /// </summary>
        public void StartupDesktopLink()
        {

            // Launch 'D:\AKOMI\Arbeitspakete\TP4 - Umsetzung\Javelin\03_Realisierung\Tapako\Tapako.Startup\bin\Debug\Tapako.Startup.exe'
            ApplicationUnderTest tapakoStartupApplication = ApplicationUnderTest.Launch(this.StartupDesktopLinkParams.ExePath, this.StartupDesktopLinkParams.AlternateExePath);
        }
        
        /// <summary>
        /// WindowShallBeActive - Use 'WindowShallBeActiveExpectedValues' to pass parameters into this method.
        /// </summary>
        public void WindowShallBeActive()
        {
            #region Variable Declarations
            WpfWindow uITapakoWindow = this.UITapakoWindow;
            #endregion

            // Verify that the 'Exists' property of 'Tapako' window equals 'True'
            Assert.AreEqual(this.WindowShallBeActiveExpectedValues.UITapakoWindowExists, uITapakoWindow.Exists, "Das Fenster ist nicht aktiv.");
        }
        
        /// <summary>
        /// Das Fenster sollte geschlossen sein
        /// </summary>
        public void WindowShallBeInactive()
        {
            #region Variable Declarations
            WpfWindow uITapakoWindow = this.UITapakoWindow;
            #endregion

            // Verify that the 'Exists' property of 'Tapako' window equals 'False'
            Assert.AreEqual(this.WindowShallBeInactiveExpectedValues.UITapakoWindowExists, uITapakoWindow.Exists, "Das Fenster wurde nicht geschlossen");
        }
        
        #region Properties
        public virtual StartApplicationParams StartApplicationParams
        {
            get
            {
                if ((this.mStartApplicationParams == null))
                {
                    this.mStartApplicationParams = new StartApplicationParams();
                }
                return this.mStartApplicationParams;
            }
        }
        
        public virtual StartupDesktopLinkParams StartupDesktopLinkParams
        {
            get
            {
                if ((this.mStartupDesktopLinkParams == null))
                {
                    this.mStartupDesktopLinkParams = new StartupDesktopLinkParams();
                }
                return this.mStartupDesktopLinkParams;
            }
        }
        
        public virtual WindowShallBeActiveExpectedValues WindowShallBeActiveExpectedValues
        {
            get
            {
                if ((this.mWindowShallBeActiveExpectedValues == null))
                {
                    this.mWindowShallBeActiveExpectedValues = new WindowShallBeActiveExpectedValues();
                }
                return this.mWindowShallBeActiveExpectedValues;
            }
        }
        
        public virtual WindowShallBeInactiveExpectedValues WindowShallBeInactiveExpectedValues
        {
            get
            {
                if ((this.mWindowShallBeInactiveExpectedValues == null))
                {
                    this.mWindowShallBeInactiveExpectedValues = new WindowShallBeInactiveExpectedValues();
                }
                return this.mWindowShallBeInactiveExpectedValues;
            }
        }
        
        public UITapakoWindow UITapakoWindow
        {
            get
            {
                if ((this.mUITapakoWindow == null))
                {
                    this.mUITapakoWindow = new UITapakoWindow();
                }
                return this.mUITapakoWindow;
            }
        }
        
        public UIRechnerWindow UIRechnerWindow
        {
            get
            {
                if ((this.mUIRechnerWindow == null))
                {
                    this.mUIRechnerWindow = new UIRechnerWindow();
                }
                return this.mUIRechnerWindow;
            }
        }
        
        public UIAboutWindow UIAboutWindow
        {
            get
            {
                if ((this.mUIAboutWindow == null))
                {
                    this.mUIAboutWindow = new UIAboutWindow();
                }
                return this.mUIAboutWindow;
            }
        }
        #endregion
        
        #region Fields
        private StartApplicationParams mStartApplicationParams;
        
        private StartupDesktopLinkParams mStartupDesktopLinkParams;
        
        private WindowShallBeActiveExpectedValues mWindowShallBeActiveExpectedValues;
        
        private WindowShallBeInactiveExpectedValues mWindowShallBeInactiveExpectedValues;
        
        private UITapakoWindow mUITapakoWindow;
        
        private UIRechnerWindow mUIRechnerWindow;
        
        private UIAboutWindow mUIAboutWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'StartApplication'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class StartApplicationParams
    {
        
        #region Fields
        /// <summary>
        /// Launch 'Tapako'
        /// </summary>
        public string ExePath = "Tapako";
        
        /// <summary>
        /// Launch 'Tapako'
        /// </summary>
        public string AlternateExePath = "Tapako";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'StartupDesktopLink'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class StartupDesktopLinkParams
    {
        
        #region Fields
        /// <summary>
        /// Launch 'D:\AKOMI\Arbeitspakete\TP4 - Umsetzung\Javelin\03_Realisierung\Tapako\Tapako.Startup\bin\Debug\Tapako.Startup.exe'
        /// </summary>
        public string ExePath = "D:\\AKOMI\\Arbeitspakete\\TP4 - Umsetzung\\Javelin\\03_Realisierung\\Tapako\\Tapako.Star" +
            "tup\\bin\\Debug\\Tapako.Startup.exe";
        
        /// <summary>
        /// Launch 'D:\AKOMI\Arbeitspakete\TP4 - Umsetzung\Javelin\03_Realisierung\Tapako\Tapako.Startup\bin\Debug\Tapako.Startup.exe'
        /// </summary>
        public string AlternateExePath = "D:\\AKOMI\\Arbeitspakete\\TP4 - Umsetzung\\Javelin\\03_Realisierung\\Tapako\\Tapako.Star" +
            "tup\\bin\\Debug\\Tapako.Startup.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'WindowShallBeActive'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WindowShallBeActiveExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Tapako' window equals 'True'
        /// </summary>
        public bool UITapakoWindowExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'WindowShallBeInactive'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WindowShallBeInactiveExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Tapako' window equals 'False'
        /// </summary>
        public bool UITapakoWindowExists = false;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITapakoWindow : WpfWindow
    {
        
        public UITapakoWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Tapako";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Tapako");
            #endregion
        }
        
        #region Properties
        public UIItemTabList UIItemTabList
        {
            get
            {
                if ((this.mUIItemTabList == null))
                {
                    this.mUIItemTabList = new UIItemTabList(this);
                }
                return this.mUIItemTabList;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTabList mUIItemTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemTabList : WpfTabList
    {
        
        public UIItemTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Tapako");
            #endregion
        }
        
        #region Properties
        public UIPeripherieanalyseTabPage UIPeripherieanalyseTabPage
        {
            get
            {
                if ((this.mUIPeripherieanalyseTabPage == null))
                {
                    this.mUIPeripherieanalyseTabPage = new UIPeripherieanalyseTabPage(this);
                }
                return this.mUIPeripherieanalyseTabPage;
            }
        }
        #endregion
        
        #region Fields
        private UIPeripherieanalyseTabPage mUIPeripherieanalyseTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPeripherieanalyseTabPage : WpfTabPage
    {
        
        public UIPeripherieanalyseTabPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Peripherieanalyse";
            this.WindowTitles.Add("Tapako");
            #endregion
        }
        
        #region Properties
        public WpfButton UIAnalysePeripheryButton
        {
            get
            {
                if ((this.mUIAnalysePeripheryButton == null))
                {
                    this.mUIAnalysePeripheryButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIAnalysePeripheryButton.SearchProperties[WpfButton.PropertyNames.Name] = "Analyse Periphery";
                    this.mUIAnalysePeripheryButton.WindowTitles.Add("Tapako");
                    #endregion
                }
                return this.mUIAnalysePeripheryButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIAnalysePeripheryButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRechnerWindow : WinWindow
    {
        
        public UIRechnerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Rechner";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CalcFrame";
            this.WindowTitles.Add("Rechner");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "137";
            this.WindowTitles.Add("Rechner");
            #endregion
        }
        
        #region Properties
        public WinButton UIItem7Button
        {
            get
            {
                if ((this.mUIItem7Button == null))
                {
                    this.mUIItem7Button = new WinButton(this);
                    #region Search Criteria
                    this.mUIItem7Button.SearchProperties[WinButton.PropertyNames.Name] = "7";
                    this.mUIItem7Button.WindowTitles.Add("Rechner");
                    #endregion
                }
                return this.mUIItem7Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItem7Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIAboutWindow : WinWindow
    {
        
        public UIAboutWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "About";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("About");
            #endregion
        }
        
        #region Properties
        public UICloseWindow UICloseWindow
        {
            get
            {
                if ((this.mUICloseWindow == null))
                {
                    this.mUICloseWindow = new UICloseWindow(this);
                }
                return this.mUICloseWindow;
            }
        }
        
        public WinTitleBar UIAboutTitleBar
        {
            get
            {
                if ((this.mUIAboutTitleBar == null))
                {
                    this.mUIAboutTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUIAboutTitleBar.WindowTitles.Add("About");
                    #endregion
                }
                return this.mUIAboutTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UICloseWindow mUICloseWindow;
        
        private WinTitleBar mUIAboutTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICloseWindow : WinWindow
    {
        
        public UICloseWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CloseBTN";
            this.WindowTitles.Add("About");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("About");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
}
