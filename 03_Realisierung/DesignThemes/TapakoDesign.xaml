<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:converter="clr-namespace:Tapako.Design.Converter"
                    xmlns:converter1="clr-namespace:Akomi.Visuals.Converter;assembly=Akomi.Visuals">

    <converter:Scaler x:Key="Scaler"></converter:Scaler>
    <converter:DivisionConverter x:Key="DivisionConverter"></converter:DivisionConverter>
    <converter1:ImageConverter x:Key="ImageConverter" />

    <Style TargetType="{x:Type ListView}">
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"></Setter>
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="Background" Value="Transparent"></Setter>
    </Style>
    
    <Style TargetType="{x:Type ListBox}">
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"></Setter>
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="Background" Value="Transparent"></Setter>
    </Style>

    <Style TargetType="{x:Type TreeView}">
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="Background" Value="Transparent"></Setter>
    </Style>
    <Style TargetType="{x:Type Window}">
        <Setter Property="FontFamily" Value="Calibri" />
        <Setter Property="FontSize" Value="14"></Setter>
        <!--<Setter Property="Margin" Value="15"></Setter>-->
        <Setter Property="Padding" Value="5"></Setter>
        <Setter Property="Background" Value="{DynamicResource TapakoBackground}">
            <!--<Setter.Value>-->
                <!--<SolidColorBrush Opacity="0.8" Color="White"></SolidColorBrush>-->
            <!--</Setter.Value>-->
        </Setter>
        <Setter Property="AllowsTransparency" Value="True"></Setter>
        <Setter Property="WindowStyle" Value="None"></Setter>
        <Setter Property="BorderThickness" Value="2"></Setter>
        <Setter Property="BorderBrush" Value="DimGray"></Setter>
    </Style>
    
    <Style TargetType="{x:Type Border}" x:Key="DefaultBorder">
        <Setter Property="BorderThickness" Value="1"></Setter>
        <Setter Property="BorderBrush" Value="DimGray"></Setter>
    </Style>
    
    <!--<Style TargetType="{x:Type SolidColorBrush}" x:Key="DefaultBackgroundBrush">
        <Setter Property="Color" Value="White"></Setter>
        <Setter Property="Opacity" Value="0.8"></Setter>
    </Style>-->


    <!--<SolidColorBrush x:Key="DefaultButtonForeground" Opacity="0.5" Color="LightGray"/>-->
    <!--<SolidColorBrush x:Key="DefaultButton" Opacity="0.8" Color="#7FFFFFFF"/>
    <SolidColorBrush x:Key="DefaultButtonHover" Opacity="0.9" Color="LightGray"/>
    <SolidColorBrush x:Key="DefaultButtonPressed" Opacity="1" Color="White"/>
    <SolidColorBrush x:Key="ExitButtonBackground" Opacity="1" Color="Red"/>-->
    <Color x:Key="DefaultButton">#FFCCCCCC</Color>
    <Color x:Key="DefaultButtonHover">#FFEEEEEE</Color>
    <Color x:Key="DefaultButtonPressed">White</Color>
    <Color x:Key="ExitButtonBackground">Red</Color>
    <!--<extensions:MixedColorBrush  Foreground="{StaticResource DefaultButtonForeground}" Background="{StaticResource DefaultButtonBackground}" x:Key="DefaultButton" />-->
    <!--<extensions:MixedColorBrush  Foreground="{StaticResource DefaultHoverForeground}" Background="{StaticResource DefaultButtonBackground}" x:Key="DefaultButtonHover" />-->
    <!--<extensions:MixedColorBrush  Foreground="{StaticResource ExitButtonBackground}" Background="{StaticResource DefaultButtonBackground}" x:Key="DefaultButtonPressed" />-->
    <SolidColorBrush x:Key="TapakoBackground" Opacity="0.8" Color="White"/>
    <SolidColorBrush x:Key="DefaultButtonBrush" Color="{DynamicResource DefaultButton}"/>
    
    <Style TargetType="{x:Type UserControl}">
        <Setter Property="Background" Value="{StaticResource TapakoBackground}" />
        <Setter Property="Margin" Value="0"></Setter>
        <!--<Setter Property="Padding" Value="5"></Setter>-->
        <Setter Property="BorderBrush" Value="DimGray"></Setter>
        <Setter Property="BorderThickness" Value="1"></Setter>
    </Style>

    <Style TargetType="{x:Type ContentControl}">
        <Setter Property="Margin" Value="5"></Setter>
        <!--<Setter Property="Padding" Value="5"></Setter>-->
    </Style>

    <Style TargetType="{x:Type Control}">
        <Setter Property="BorderBrush" Value="DimGray"></Setter>
        <Setter Property="BorderThickness" Value="1"></Setter>
    </Style>
    
    <Style TargetType="{x:Type TabControl}">
        <Setter Property="Background">
            <Setter.Value>Transparent
            </Setter.Value>
        </Setter>
        <Setter Property="Padding" Value="0"></Setter>
        <Setter Property="Margin" Value="5"></Setter>
    </Style>

    <Style TargetType="{x:Type TabItem}">
        <Setter Property="Padding" Value="0"></Setter>
        <Setter Property="Margin" Value="0"></Setter>
        <Setter Property="BorderBrush" Value="DimGray"></Setter>
        <Setter Property="BorderThickness" Value="1"></Setter>
        <Setter Property="Background" Value="{StaticResource TapakoBackground}" />

    </Style>
    
    <Style TargetType="{x:Type TabItem}" x:Key="StrechedTabs">
        <Setter Property="Width">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource DivisionConverter}" ConverterParameter="2">
                    <Binding  Path="ActualWidth"
                                  RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type TabControl}}"/>

                    <Binding Path="Items.Count"
                                 RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type TabControl}}"/>
                </MultiBinding>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush" Value="DimGray"></Setter>
        <Setter Property="BorderThickness" Value="1"></Setter>
    </Style>

    
    
    <Style TargetType="{x:Type Button}">
        <!--Source:http://stackoverflow.com/questions/6745663/how-to-create-make-rounded-corner-buttons-in-wpf-->
        <Setter Property="Margin" Value="5"></Setter>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Background" Value="{StaticResource DefaultButtonBrush}">
     
            <!--<Setter.Value>
                <extensions:MixedColorBrush Foreground="{StaticResource DefaultButtonForeground}" Background="{StaticResource DefaultButtonBackground}"/>
            </Setter.Value>-->
        </Setter>
        <!--<Setter Property="Padding" Value="1"></Setter>-->
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Border TextBlock.Foreground="{TemplateBinding Foreground}" x:Name="Border" 
                                BorderThickness="1" 
                                BorderBrush="Black">
                            <Border.Style>
                                <Style TargetType="Border">
                                    <Style.Setters>
                                        <Setter Property="Background" Value="{StaticResource DefaultButtonBrush}"></Setter>
                                    </Style.Setters>
                                </Style>
                            </Border.Style>
                            <!--<Border.Background>
                                --><!--<SolidColorBrush Color="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=Button}, Path=Background}"></SolidColorBrush>--><!--
                                <SolidColorBrush Color="{DynamicResource DefaultButton}">
                                </SolidColorBrush>
                            </Border.Background>-->
                            <Border.Effect>
                                <BlurEffect Radius="2"></BlurEffect>
                            </Border.Effect>
                            <!--<Border.Style>
                                <Style TargetType="Border">
                                    <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=Button}, Path=Background}"></Setter>
                                </Style>
                            </Border.Style>-->
                        </Border>

                        <ContentPresenter Margin="5,0,5,0"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            RecognizesAccessKey="True">
                        </ContentPresenter>

                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.4" />
                                    <VisualTransition GeneratedDuration="0" To="Pressed" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames 
                                            Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                                Storyboard.TargetName="Border">
                                            <EasingColorKeyFrame KeyTime="0" Value="{DynamicResource DefaultButtonHover}" />
                                        </ColorAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames 
                                              Storyboard.TargetName="Border"
                                            Storyboard.TargetProperty="(Effect).(BlurEffect.Radius)">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="3"></EasingDoubleKeyFrame>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                                Storyboard.TargetName="Border">
                                            <EasingColorKeyFrame KeyTime="0" Value="{DynamicResource DefaultButtonPressed}" />
                                        </ColorAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames 
                                              Storyboard.TargetName="Border"
                                            Storyboard.TargetProperty="(Effect).(BlurEffect.Radius)">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="4"></EasingDoubleKeyFrame>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Opacity)"
                                                Storyboard.TargetName="Border">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.25" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        
        <!--<Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="grid">
                        <Border x:Name="border" 
                                CornerRadius="0" 
                                BorderBrush="DimGray" 
                                BorderThickness="1"
                                Padding="3,0,3,0"
                                >
                            <Border.Style>
                                <Style TargetType="Border">
                                    <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=Button}, Path=Background}"></Setter>
                                </Style>
                            </Border.Style>
                            <ContentPresenter HorizontalAlignment="Center"
                         VerticalAlignment="Center"
                         TextElement.FontWeight="Medium">
                                <ContentPresenter.Effect>
                                    <x:Null></x:Null>
                                </ContentPresenter.Effect>
                            </ContentPresenter>
                        </Border>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border"  Value="{StaticResource DefaultButtonPressed}">
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Effect" TargetName="border">
                            <Setter.Value>
                                   <DropShadowEffect ShadowDepth="0"
                                    Color="Black"
                                    Opacity="0.8"
                                    BlurRadius="3"/>  
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Background" TargetName="border" Value="{StaticResource DefaultButtonHover}">
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="grid" Value="0.25"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>-->
    </Style>

    <Style TargetType="{x:Type Button}" x:Key="TitleBarButton" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Margin" Value="0"></Setter>
        <Setter Property="Padding" Value="3"></Setter>
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
        <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource self}, Converter={StaticResource Scaler}, ConverterParameter=2}"></Setter>
    </Style>

    <Style TargetType="{x:Type TextBlock}" x:Key="BigBoldTextBlock">
        <Setter Property="FontWeight" Value="Bold"></Setter>
        <Setter Property="FontSize" Value="22"></Setter>
    </Style>

    <Style TargetType="{x:Type TextBlock}" x:Key="BoldTextBlock">
        <Setter Property="FontWeight" Value="Bold"></Setter>
        <Setter Property="FontSize" Value="18"></Setter>
    </Style>

    <Style TargetType="{x:Type TextBlock}" x:Key="SmallBoldTextBlock">
        <Setter Property="FontWeight" Value="Bold"></Setter>
        <Setter Property="FontSize" Value="12"></Setter>
    </Style>

    <Style TargetType="{x:Type TextBlock}" x:Key="VerySmallBoldTextBlock">
        <Setter Property="FontWeight" Value="Bold"></Setter>
        <Setter Property="FontSize" Value="10"></Setter>
    </Style>

    <Style TargetType="{x:Type TextBlock}" x:Key="BigTextBlock">
        <Setter Property="FontSize" Value="16"></Setter>
    </Style>
    
    <Style TargetType="{x:Type TextBlock}" x:Key="DefaultTextBlock">
        <Setter Property="FontSize" Value="14"></Setter>
    </Style>

    <Style TargetType="{x:Type TextBlock}" x:Key="SmallTextBlock">
        <Setter Property="FontSize" Value="12"></Setter>
    </Style>
    
    <Style TargetType="{x:Type TextBlock}" x:Key="VerySmallTextBlock">
        <Setter Property="FontSize" Value="7"></Setter>
    </Style>

    <Style TargetType="{x:Type Label}" x:Key="Heading">
        <Setter Property="FontWeight" Value="Bold"></Setter>
        <Setter Property="FontSize" Value="18"></Setter>
    </Style>

    <Style TargetType="{x:Type Label}" x:Key="BigHeading">
        <Setter Property="FontWeight" Value="Bold"></Setter>
        <Setter Property="FontSize" Value="22"></Setter>
    </Style>

    <Style TargetType="{x:Type Label}" x:Key="SmallHeading">
        <Setter Property="FontWeight" Value="Bold"></Setter>
        <Setter Property="FontSize" Value="14"></Setter>
    </Style>

    <Style TargetType="{x:Type Label}" x:Key="VerySmallHeading">
        <Setter Property="FontWeight" Value="Bold"></Setter>
        <Setter Property="FontSize" Value="10"></Setter>
    </Style>
    
    <Style TargetType="{x:Type Label}" x:Key="BigContent">
        <Setter Property="FontSize" Value="16"></Setter>
    </Style>

    <Style TargetType="{x:Type Label}" x:Key="Content">
        <Setter Property="FontSize" Value="14"></Setter>
    </Style>
    
    <Style TargetType="{x:Type Label}" x:Key="SmallContent">
        <Setter Property="FontSize" Value="10"></Setter>
    </Style>

    <Style TargetType="{x:Type Label}" x:Key="TabItemText" BasedOn="{StaticResource Content}">
    </Style>

    <Style TargetType="{x:Type FrameworkElement}">
        <Setter Property="Margin" Value="0"></Setter>
    </Style>

    <Style TargetType="{x:Type TextBox}">
        <Setter Property="Margin" Value="5"></Setter>
        <Setter Property="FontFamily" Value="Calibri" />
    </Style>
    
    <Style TargetType="{x:Type Label}">
        <Setter Property="FontFamily" Value="Calibri" />
    </Style>


    <Style x:Key="VerticalGridSplitter" TargetType="{x:Type GridSplitter}">
        <Setter Property="Width" Value="4"></Setter>
        <Setter Property="Height" Value="Auto"></Setter>
        <Setter Property="HorizontalAlignment" Value="Left"></Setter>
        <Setter Property="VerticalAlignment" Value="Stretch"></Setter>
        <Setter Property="ShowsPreview" Value="False"></Setter>
        <Setter Property="ResizeBehavior" Value="PreviousAndNext"></Setter>
        <Setter Property="Background" Value="White"></Setter>
    </Style>


    <Style TargetType="{x:Type WrapPanel}">
        <Setter Property="Background" Value="Transparent">
            <!--<Setter.Value>
                <SolidColorBrush Opacity="1" Color="White"></SolidColorBrush>
            </Setter.Value>-->
        </Setter>
    </Style>

    <Style TargetType="ListBoxItem">
        <Setter Property="Padding" Value="0"></Setter>
        <Setter Property="Margin" Value="0"></Setter>
    </Style>

    <Style TargetType="{x:Type Image}" x:Key="HmiImage">
        <Setter Property="Stretch" Value="Uniform" />
        <Setter Property="Source"
                        Value="{Binding DeviceModel.PresentationData.HmiImage, Converter={StaticResource ImageConverter}}" />
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition
                                Binding="{Binding DeviceModel.PresentationData.HmiImage, Converter={StaticResource ImageConverter}}"
                                Value="{x:Null}" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Source"
                                    Value="pack://application:,,,/Tapako.Design;component/Resources/AkomiLogo.png" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>
    
</ResourceDictionary>